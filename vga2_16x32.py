# vga2_16x32.py
# Minimal 16x32 pixel font with digits 0-9 and letters M, P, H, K only
# For use with ST7789 display text rendering

# Each character is 16 pixels wide and 32 pixels tall.
# For simplicity, each char bitmap is stored as a list of 32 bytes,
# each byte representing 8 horizontal pixels (only 2 bytes per row for 16 pixels).

# This font is monochrome and each byte represents a row of pixels.
# 1 bits are pixels on, 0 bits off.

font = {
    ' ': [0x00]*64,  # space: 16x32 pixels = 64 bytes (2 bytes per row * 32 rows)

    '0': [
        0x03, 0xC0,  # Row 0
        0x0F, 0xF0,  # Row 1
        0x1C, 0x38,
        0x38, 0x1C,
        0x70, 0x0E,
        0x70, 0x0E,
        0x70, 0x0E,
        0x70, 0x0E,
        0x70, 0x0E,
        0x70, 0x0E,
        0x70, 0x0E,
        0x70, 0x0E,
        0x38, 0x1C,
        0x1C, 0x38,
        0x0F, 0xF0,
        0x03, 0xC0,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
        0x00, 0x00,
    ],

    # ... similarly define digits 1-9 here (omitted for brevity) ...

    '1': [ # simplified example
        0x00, 0xC0,
        0x00, 0xF0,
        0x00, 0x38,
        0x00, 0x1C,
        0x00, 0x0E,
        0x00, 0x06,
        0x00, 0x06,
        0x00, 0x06,
        0x00, 0x06,
        0x00, 0x06,
        0x00, 0x06,
        0x00, 0x06,
        0x00, 0x06,
        0x00, 0x06,
        0x00, 0x00,
        0x00, 0x00,
        # blank padding rows to total 64 bytes
    ] + [0x00]*48,

    'M': [
        0xC3, 0x18,
        0xE7, 0x38,
        0xFF, 0xF8,
        0xDB, 0xB8,
        0xC3, 0x18,
        0xC3, 0x18,
        0xC3, 0x18,
        0xC3, 0x18,
        0xC3, 0x18,
        0xC3, 0x18,
        0xC3, 0x18,
        0x00, 0x00,
    ] + [0x00]*52,

    'P': [
        0xFE, 0x00,
        0xFF, 0x80,
        0xC3, 0xC0,
        0xC3, 0xC0,
        0xFF, 0x80,
        0xFE, 0x00,
        0xC0, 0x00,
        0xC0, 0x00,
        0xC0, 0x00,
        0xC0, 0x00,
        0xC0, 0x00,
        0x00, 0x00,
    ] + [0x00]*52,

    'H': [
        0xC3, 0xC0,
        0xC3, 0xC0,
        0xC3, 0xC0,
        0xC3, 0xC0,
        0xFF, 0xC0,
        0xFF, 0xC0,
        0xC3, 0xC0,
        0xC3, 0xC0,
        0xC3, 0xC0,
        0xC3, 0xC0,
        0xC3, 0xC0,
        0x00, 0x00,
    ] + [0x00]*52,

    'K': [
        0xC1, 0x80,
        0xC3, 0x00,
        0xC6, 0x00,
        0xCC, 0x00,
        0xD8, 0x00,
        0xF0, 0x00,
        0xD8, 0x00,
        0xCC, 0x00,
        0xC6, 0x00,
        0xC3, 0x00,
        0xC1, 0x80,
        0x00, 0x00,
    ] + [0x00]*52,
}

def get_char_bitmap(c):
    return font.get(c.upper(), font[' '])  # fallback to space if char not found
